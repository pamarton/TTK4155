
Oving1_TTK4155_G17_H17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000004c8  0000055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800120  00800120  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d6  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030a  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a5  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021a  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ec       	ldi	r30, 0xC8	; 200
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 32       	cpi	r26, 0x20	; 32
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e2       	ldi	r26, 0x20	; 32
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 32       	cpi	r26, 0x2A	; 42
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  a6:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <set_pin>:
		return 0;
	}
	return 1;
}
uint8_t set_pin(uint8_t * port, uint8_t pin, uint8_t val){ //sets pins, returns value of 1 if successful
	*port |= (1 << pin);
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <set_pin+0xc>
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <set_pin+0x8>
  be:	bf 01       	movw	r22, r30
  c0:	fc 01       	movw	r30, r24
  c2:	20 81       	ld	r18, Z
  c4:	62 2b       	or	r22, r18
  c6:	60 83       	st	Z, r22
	
	if (val == ON){
		//PORTA |= (1 << pin);
	}else if (val == OFF){
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	42 30       	cpi	r20, 0x02	; 2
  cc:	08 f0       	brcs	.+2      	; 0xd0 <set_pin+0x22>
  ce:	80 e0       	ldi	r24, 0x00	; 0
		//&port &= !(1 << pin);
	}else{
		return 0;
	}
	return 1;
}
  d0:	08 95       	ret

000000d2 <main>:
//#include <avr/interrupt.h>
#include "uart.h"
#include "i_o.h"
int main(void)
{
	init_UART(UBBR);
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 85 00 	call	0x10a	; 0x10a <init_UART>
	
	DDRA = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a bb       	out	0x1a, r24	; 26
	
	set_pin(&PORTA, PINA4, ON);
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	64 e0       	ldi	r22, 0x04	; 4
  e2:	8b e3       	ldi	r24, 0x3B	; 59
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 57 00 	call	0xae	; 0xae <set_pin>
	
	testUart();
  ea:	0e 94 90 00 	call	0x120	; 0x120 <testUart>
	while (1)
	{
		printf("placeholder\n");
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <puts>
  f6:	fb cf       	rjmp	.-10     	; 0xee <main+0x1c>

000000f8 <send_UART>:
 */ 
#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <send_UART>
	UDR0 = letter;
  fc:	8c b9       	out	0x0c, r24	; 12
  fe:	08 95       	ret

00000100 <recieve_UART>:
	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
}

unsigned int recieve_UART(void){
	while (!(UCSR0A & (1 << RXC0)));
 100:	5f 9b       	sbis	0x0b, 7	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <recieve_UART>
	return UDR0;
 104:	8c b1       	in	r24, 0x0c	; 12
}
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	08 95       	ret

0000010a <init_UART>:
	UDR0 = letter;
}

void init_UART(unsigned int ubrr){
	//set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 10a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
 10c:	89 b9       	out	0x09, r24	; 9
	//enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	8a b9       	out	0x0a, r24	; 10
	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART); //overrides printf("string");
 112:	60 e8       	ldi	r22, 0x80	; 128
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	8c e7       	ldi	r24, 0x7C	; 124
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 a0 00 	call	0x140	; 0x140 <fdevopen>
 11e:	08 95       	ret

00000120 <testUart>:
unsigned int recieve_UART(void){
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

void testUart(void){
 120:	cf 93       	push	r28
	printf("turn off? Y/N\n");
 122:	82 e1       	ldi	r24, 0x12	; 18
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <puts>
	
	unsigned char temp = ' ';
	while(1){
		temp = recieve_UART();
 12a:	0e 94 80 00 	call	0x100	; 0x100 <recieve_UART>
 12e:	c8 2f       	mov	r28, r24
		if (temp != 0){
 130:	88 23       	and	r24, r24
 132:	d9 f3       	breq	.-10     	; 0x12a <testUart+0xa>
			send_UART(temp);
 134:	0e 94 7c 00 	call	0xf8	; 0xf8 <send_UART>
		}
		if (temp == 'Y'){
 138:	c9 35       	cpi	r28, 0x59	; 89
 13a:	b9 f7       	brne	.-18     	; 0x12a <testUart+0xa>
			break;
		}
	};
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <fdevopen>:
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	8b 01       	movw	r16, r22
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	31 f4       	brne	.+12     	; 0x15c <fdevopen+0x1c>
 150:	61 15       	cp	r22, r1
 152:	71 05       	cpc	r23, r1
 154:	19 f4       	brne	.+6      	; 0x15c <fdevopen+0x1c>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	38 c0       	rjmp	.+112    	; 0x1cc <fdevopen+0x8c>
 15c:	6e e0       	ldi	r22, 0x0E	; 14
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 18 01 	call	0x230	; 0x230 <calloc>
 168:	fc 01       	movw	r30, r24
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	a1 f3       	breq	.-24     	; 0x156 <fdevopen+0x16>
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	83 83       	std	Z+3, r24	; 0x03
 172:	01 15       	cp	r16, r1
 174:	11 05       	cpc	r17, r1
 176:	71 f0       	breq	.+28     	; 0x194 <fdevopen+0x54>
 178:	13 87       	std	Z+11, r17	; 0x0b
 17a:	02 87       	std	Z+10, r16	; 0x0a
 17c:	81 e8       	ldi	r24, 0x81	; 129
 17e:	83 83       	std	Z+3, r24	; 0x03
 180:	80 91 20 01 	lds	r24, 0x0120
 184:	90 91 21 01 	lds	r25, 0x0121
 188:	89 2b       	or	r24, r25
 18a:	21 f4       	brne	.+8      	; 0x194 <fdevopen+0x54>
 18c:	f0 93 21 01 	sts	0x0121, r31
 190:	e0 93 20 01 	sts	0x0120, r30
 194:	20 97       	sbiw	r28, 0x00	; 0
 196:	c9 f0       	breq	.+50     	; 0x1ca <fdevopen+0x8a>
 198:	d1 87       	std	Z+9, r29	; 0x09
 19a:	c0 87       	std	Z+8, r28	; 0x08
 19c:	83 81       	ldd	r24, Z+3	; 0x03
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	83 83       	std	Z+3, r24	; 0x03
 1a2:	80 91 22 01 	lds	r24, 0x0122
 1a6:	90 91 23 01 	lds	r25, 0x0123
 1aa:	89 2b       	or	r24, r25
 1ac:	71 f4       	brne	.+28     	; 0x1ca <fdevopen+0x8a>
 1ae:	f0 93 23 01 	sts	0x0123, r31
 1b2:	e0 93 22 01 	sts	0x0122, r30
 1b6:	80 91 24 01 	lds	r24, 0x0124
 1ba:	90 91 25 01 	lds	r25, 0x0125
 1be:	89 2b       	or	r24, r25
 1c0:	21 f4       	brne	.+8      	; 0x1ca <fdevopen+0x8a>
 1c2:	f0 93 25 01 	sts	0x0125, r31
 1c6:	e0 93 24 01 	sts	0x0124, r30
 1ca:	cf 01       	movw	r24, r30
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <puts>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	e0 91 22 01 	lds	r30, 0x0122
 1e2:	f0 91 23 01 	lds	r31, 0x0123
 1e6:	23 81       	ldd	r18, Z+3	; 0x03
 1e8:	21 ff       	sbrs	r18, 1
 1ea:	1b c0       	rjmp	.+54     	; 0x222 <puts+0x4c>
 1ec:	ec 01       	movw	r28, r24
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	89 91       	ld	r24, Y+
 1f4:	60 91 22 01 	lds	r22, 0x0122
 1f8:	70 91 23 01 	lds	r23, 0x0123
 1fc:	db 01       	movw	r26, r22
 1fe:	18 96       	adiw	r26, 0x08	; 8
 200:	ed 91       	ld	r30, X+
 202:	fc 91       	ld	r31, X
 204:	19 97       	sbiw	r26, 0x09	; 9
 206:	88 23       	and	r24, r24
 208:	31 f0       	breq	.+12     	; 0x216 <puts+0x40>
 20a:	09 95       	icall
 20c:	89 2b       	or	r24, r25
 20e:	89 f3       	breq	.-30     	; 0x1f2 <puts+0x1c>
 210:	0f ef       	ldi	r16, 0xFF	; 255
 212:	1f ef       	ldi	r17, 0xFF	; 255
 214:	ee cf       	rjmp	.-36     	; 0x1f2 <puts+0x1c>
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	09 95       	icall
 21a:	89 2b       	or	r24, r25
 21c:	11 f4       	brne	.+4      	; 0x222 <puts+0x4c>
 21e:	c8 01       	movw	r24, r16
 220:	02 c0       	rjmp	.+4      	; 0x226 <puts+0x50>
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <calloc>:
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	86 9f       	mul	r24, r22
 23a:	80 01       	movw	r16, r0
 23c:	87 9f       	mul	r24, r23
 23e:	10 0d       	add	r17, r0
 240:	96 9f       	mul	r25, r22
 242:	10 0d       	add	r17, r0
 244:	11 24       	eor	r1, r1
 246:	c8 01       	movw	r24, r16
 248:	0e 94 34 01 	call	0x268	; 0x268 <malloc>
 24c:	ec 01       	movw	r28, r24
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	29 f0       	breq	.+10     	; 0x25c <calloc+0x2c>
 252:	a8 01       	movw	r20, r16
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <memset>
 25c:	ce 01       	movw	r24, r28
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <malloc>:
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	91 05       	cpc	r25, r1
 270:	10 f4       	brcc	.+4      	; 0x276 <malloc+0xe>
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	e0 91 28 01 	lds	r30, 0x0128
 27a:	f0 91 29 01 	lds	r31, 0x0129
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	a0 e0       	ldi	r26, 0x00	; 0
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	30 97       	sbiw	r30, 0x00	; 0
 288:	39 f1       	breq	.+78     	; 0x2d8 <malloc+0x70>
 28a:	40 81       	ld	r20, Z
 28c:	51 81       	ldd	r21, Z+1	; 0x01
 28e:	48 17       	cp	r20, r24
 290:	59 07       	cpc	r21, r25
 292:	b8 f0       	brcs	.+46     	; 0x2c2 <malloc+0x5a>
 294:	48 17       	cp	r20, r24
 296:	59 07       	cpc	r21, r25
 298:	71 f4       	brne	.+28     	; 0x2b6 <malloc+0x4e>
 29a:	82 81       	ldd	r24, Z+2	; 0x02
 29c:	93 81       	ldd	r25, Z+3	; 0x03
 29e:	10 97       	sbiw	r26, 0x00	; 0
 2a0:	29 f0       	breq	.+10     	; 0x2ac <malloc+0x44>
 2a2:	13 96       	adiw	r26, 0x03	; 3
 2a4:	9c 93       	st	X, r25
 2a6:	8e 93       	st	-X, r24
 2a8:	12 97       	sbiw	r26, 0x02	; 2
 2aa:	2c c0       	rjmp	.+88     	; 0x304 <malloc+0x9c>
 2ac:	90 93 29 01 	sts	0x0129, r25
 2b0:	80 93 28 01 	sts	0x0128, r24
 2b4:	27 c0       	rjmp	.+78     	; 0x304 <malloc+0x9c>
 2b6:	21 15       	cp	r18, r1
 2b8:	31 05       	cpc	r19, r1
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <malloc+0x60>
 2bc:	42 17       	cp	r20, r18
 2be:	53 07       	cpc	r21, r19
 2c0:	18 f0       	brcs	.+6      	; 0x2c8 <malloc+0x60>
 2c2:	a9 01       	movw	r20, r18
 2c4:	db 01       	movw	r26, r22
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <malloc+0x62>
 2c8:	ef 01       	movw	r28, r30
 2ca:	9a 01       	movw	r18, r20
 2cc:	bd 01       	movw	r22, r26
 2ce:	df 01       	movw	r26, r30
 2d0:	02 80       	ldd	r0, Z+2	; 0x02
 2d2:	f3 81       	ldd	r31, Z+3	; 0x03
 2d4:	e0 2d       	mov	r30, r0
 2d6:	d7 cf       	rjmp	.-82     	; 0x286 <malloc+0x1e>
 2d8:	21 15       	cp	r18, r1
 2da:	31 05       	cpc	r19, r1
 2dc:	f9 f0       	breq	.+62     	; 0x31c <malloc+0xb4>
 2de:	28 1b       	sub	r18, r24
 2e0:	39 0b       	sbc	r19, r25
 2e2:	24 30       	cpi	r18, 0x04	; 4
 2e4:	31 05       	cpc	r19, r1
 2e6:	80 f4       	brcc	.+32     	; 0x308 <malloc+0xa0>
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	9b 81       	ldd	r25, Y+3	; 0x03
 2ec:	61 15       	cp	r22, r1
 2ee:	71 05       	cpc	r23, r1
 2f0:	21 f0       	breq	.+8      	; 0x2fa <malloc+0x92>
 2f2:	fb 01       	movw	r30, r22
 2f4:	93 83       	std	Z+3, r25	; 0x03
 2f6:	82 83       	std	Z+2, r24	; 0x02
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <malloc+0x9a>
 2fa:	90 93 29 01 	sts	0x0129, r25
 2fe:	80 93 28 01 	sts	0x0128, r24
 302:	fe 01       	movw	r30, r28
 304:	32 96       	adiw	r30, 0x02	; 2
 306:	44 c0       	rjmp	.+136    	; 0x390 <malloc+0x128>
 308:	fe 01       	movw	r30, r28
 30a:	e2 0f       	add	r30, r18
 30c:	f3 1f       	adc	r31, r19
 30e:	81 93       	st	Z+, r24
 310:	91 93       	st	Z+, r25
 312:	22 50       	subi	r18, 0x02	; 2
 314:	31 09       	sbc	r19, r1
 316:	39 83       	std	Y+1, r19	; 0x01
 318:	28 83       	st	Y, r18
 31a:	3a c0       	rjmp	.+116    	; 0x390 <malloc+0x128>
 31c:	20 91 26 01 	lds	r18, 0x0126
 320:	30 91 27 01 	lds	r19, 0x0127
 324:	23 2b       	or	r18, r19
 326:	41 f4       	brne	.+16     	; 0x338 <malloc+0xd0>
 328:	20 91 02 01 	lds	r18, 0x0102
 32c:	30 91 03 01 	lds	r19, 0x0103
 330:	30 93 27 01 	sts	0x0127, r19
 334:	20 93 26 01 	sts	0x0126, r18
 338:	20 91 00 01 	lds	r18, 0x0100
 33c:	30 91 01 01 	lds	r19, 0x0101
 340:	21 15       	cp	r18, r1
 342:	31 05       	cpc	r19, r1
 344:	41 f4       	brne	.+16     	; 0x356 <malloc+0xee>
 346:	2d b7       	in	r18, 0x3d	; 61
 348:	3e b7       	in	r19, 0x3e	; 62
 34a:	40 91 04 01 	lds	r20, 0x0104
 34e:	50 91 05 01 	lds	r21, 0x0105
 352:	24 1b       	sub	r18, r20
 354:	35 0b       	sbc	r19, r21
 356:	e0 91 26 01 	lds	r30, 0x0126
 35a:	f0 91 27 01 	lds	r31, 0x0127
 35e:	e2 17       	cp	r30, r18
 360:	f3 07       	cpc	r31, r19
 362:	a0 f4       	brcc	.+40     	; 0x38c <malloc+0x124>
 364:	2e 1b       	sub	r18, r30
 366:	3f 0b       	sbc	r19, r31
 368:	28 17       	cp	r18, r24
 36a:	39 07       	cpc	r19, r25
 36c:	78 f0       	brcs	.+30     	; 0x38c <malloc+0x124>
 36e:	ac 01       	movw	r20, r24
 370:	4e 5f       	subi	r20, 0xFE	; 254
 372:	5f 4f       	sbci	r21, 0xFF	; 255
 374:	24 17       	cp	r18, r20
 376:	35 07       	cpc	r19, r21
 378:	48 f0       	brcs	.+18     	; 0x38c <malloc+0x124>
 37a:	4e 0f       	add	r20, r30
 37c:	5f 1f       	adc	r21, r31
 37e:	50 93 27 01 	sts	0x0127, r21
 382:	40 93 26 01 	sts	0x0126, r20
 386:	81 93       	st	Z+, r24
 388:	91 93       	st	Z+, r25
 38a:	02 c0       	rjmp	.+4      	; 0x390 <malloc+0x128>
 38c:	e0 e0       	ldi	r30, 0x00	; 0
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	cf 01       	movw	r24, r30
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <free>:
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	00 97       	sbiw	r24, 0x00	; 0
 39e:	09 f4       	brne	.+2      	; 0x3a2 <free+0xa>
 3a0:	87 c0       	rjmp	.+270    	; 0x4b0 <free+0x118>
 3a2:	fc 01       	movw	r30, r24
 3a4:	32 97       	sbiw	r30, 0x02	; 2
 3a6:	13 82       	std	Z+3, r1	; 0x03
 3a8:	12 82       	std	Z+2, r1	; 0x02
 3aa:	c0 91 28 01 	lds	r28, 0x0128
 3ae:	d0 91 29 01 	lds	r29, 0x0129
 3b2:	20 97       	sbiw	r28, 0x00	; 0
 3b4:	81 f4       	brne	.+32     	; 0x3d6 <free+0x3e>
 3b6:	20 81       	ld	r18, Z
 3b8:	31 81       	ldd	r19, Z+1	; 0x01
 3ba:	28 0f       	add	r18, r24
 3bc:	39 1f       	adc	r19, r25
 3be:	80 91 26 01 	lds	r24, 0x0126
 3c2:	90 91 27 01 	lds	r25, 0x0127
 3c6:	82 17       	cp	r24, r18
 3c8:	93 07       	cpc	r25, r19
 3ca:	79 f5       	brne	.+94     	; 0x42a <free+0x92>
 3cc:	f0 93 27 01 	sts	0x0127, r31
 3d0:	e0 93 26 01 	sts	0x0126, r30
 3d4:	6d c0       	rjmp	.+218    	; 0x4b0 <free+0x118>
 3d6:	de 01       	movw	r26, r28
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	ae 17       	cp	r26, r30
 3de:	bf 07       	cpc	r27, r31
 3e0:	50 f4       	brcc	.+20     	; 0x3f6 <free+0x5e>
 3e2:	12 96       	adiw	r26, 0x02	; 2
 3e4:	4d 91       	ld	r20, X+
 3e6:	5c 91       	ld	r21, X
 3e8:	13 97       	sbiw	r26, 0x03	; 3
 3ea:	9d 01       	movw	r18, r26
 3ec:	41 15       	cp	r20, r1
 3ee:	51 05       	cpc	r21, r1
 3f0:	09 f1       	breq	.+66     	; 0x434 <free+0x9c>
 3f2:	da 01       	movw	r26, r20
 3f4:	f3 cf       	rjmp	.-26     	; 0x3dc <free+0x44>
 3f6:	b3 83       	std	Z+3, r27	; 0x03
 3f8:	a2 83       	std	Z+2, r26	; 0x02
 3fa:	40 81       	ld	r20, Z
 3fc:	51 81       	ldd	r21, Z+1	; 0x01
 3fe:	84 0f       	add	r24, r20
 400:	95 1f       	adc	r25, r21
 402:	8a 17       	cp	r24, r26
 404:	9b 07       	cpc	r25, r27
 406:	71 f4       	brne	.+28     	; 0x424 <free+0x8c>
 408:	8d 91       	ld	r24, X+
 40a:	9c 91       	ld	r25, X
 40c:	11 97       	sbiw	r26, 0x01	; 1
 40e:	84 0f       	add	r24, r20
 410:	95 1f       	adc	r25, r21
 412:	02 96       	adiw	r24, 0x02	; 2
 414:	91 83       	std	Z+1, r25	; 0x01
 416:	80 83       	st	Z, r24
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	8d 91       	ld	r24, X+
 41c:	9c 91       	ld	r25, X
 41e:	13 97       	sbiw	r26, 0x03	; 3
 420:	93 83       	std	Z+3, r25	; 0x03
 422:	82 83       	std	Z+2, r24	; 0x02
 424:	21 15       	cp	r18, r1
 426:	31 05       	cpc	r19, r1
 428:	29 f4       	brne	.+10     	; 0x434 <free+0x9c>
 42a:	f0 93 29 01 	sts	0x0129, r31
 42e:	e0 93 28 01 	sts	0x0128, r30
 432:	3e c0       	rjmp	.+124    	; 0x4b0 <free+0x118>
 434:	d9 01       	movw	r26, r18
 436:	13 96       	adiw	r26, 0x03	; 3
 438:	fc 93       	st	X, r31
 43a:	ee 93       	st	-X, r30
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	4d 91       	ld	r20, X+
 440:	5d 91       	ld	r21, X+
 442:	a4 0f       	add	r26, r20
 444:	b5 1f       	adc	r27, r21
 446:	ea 17       	cp	r30, r26
 448:	fb 07       	cpc	r31, r27
 44a:	79 f4       	brne	.+30     	; 0x46a <free+0xd2>
 44c:	80 81       	ld	r24, Z
 44e:	91 81       	ldd	r25, Z+1	; 0x01
 450:	84 0f       	add	r24, r20
 452:	95 1f       	adc	r25, r21
 454:	02 96       	adiw	r24, 0x02	; 2
 456:	d9 01       	movw	r26, r18
 458:	11 96       	adiw	r26, 0x01	; 1
 45a:	9c 93       	st	X, r25
 45c:	8e 93       	st	-X, r24
 45e:	82 81       	ldd	r24, Z+2	; 0x02
 460:	93 81       	ldd	r25, Z+3	; 0x03
 462:	13 96       	adiw	r26, 0x03	; 3
 464:	9c 93       	st	X, r25
 466:	8e 93       	st	-X, r24
 468:	12 97       	sbiw	r26, 0x02	; 2
 46a:	e0 e0       	ldi	r30, 0x00	; 0
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	9b 81       	ldd	r25, Y+3	; 0x03
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	19 f0       	breq	.+6      	; 0x47c <free+0xe4>
 476:	fe 01       	movw	r30, r28
 478:	ec 01       	movw	r28, r24
 47a:	f9 cf       	rjmp	.-14     	; 0x46e <free+0xd6>
 47c:	ce 01       	movw	r24, r28
 47e:	02 96       	adiw	r24, 0x02	; 2
 480:	28 81       	ld	r18, Y
 482:	39 81       	ldd	r19, Y+1	; 0x01
 484:	82 0f       	add	r24, r18
 486:	93 1f       	adc	r25, r19
 488:	20 91 26 01 	lds	r18, 0x0126
 48c:	30 91 27 01 	lds	r19, 0x0127
 490:	28 17       	cp	r18, r24
 492:	39 07       	cpc	r19, r25
 494:	69 f4       	brne	.+26     	; 0x4b0 <free+0x118>
 496:	30 97       	sbiw	r30, 0x00	; 0
 498:	29 f4       	brne	.+10     	; 0x4a4 <free+0x10c>
 49a:	10 92 29 01 	sts	0x0129, r1
 49e:	10 92 28 01 	sts	0x0128, r1
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <free+0x110>
 4a4:	13 82       	std	Z+3, r1	; 0x03
 4a6:	12 82       	std	Z+2, r1	; 0x02
 4a8:	d0 93 27 01 	sts	0x0127, r29
 4ac:	c0 93 26 01 	sts	0x0126, r28
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <memset>:
 4b6:	dc 01       	movw	r26, r24
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <memset+0x6>
 4ba:	6d 93       	st	X+, r22
 4bc:	41 50       	subi	r20, 0x01	; 1
 4be:	50 40       	sbci	r21, 0x00	; 0
 4c0:	e0 f7       	brcc	.-8      	; 0x4ba <memset+0x4>
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
